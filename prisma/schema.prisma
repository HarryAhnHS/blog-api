// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id             String      @id @default(uuid())
  sid            String      @unique
  data           String
  expiresAt      DateTime
}

model User {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  email          String      @unique
  username       String      @unique
  password       String
  profilePicture String?
  bio            String?

  posts          Post[]
  likes          Like[]      @relation("LikedBy")
  comments       Comment[]

  followers      Follow[]    @relation("Followers")
  following      Follow[]    @relation("Following")

  joinedRealms   JoinRealm[] @relation("JoiningRealm")
  createdRealms  Realm[]     @relation("RealmCreatedBy")
}

model Follow {
  follower       User        @relation("Following", fields: [followerId], references: [id])
  followerId     String
  following      User        @relation("Followers", fields: [followingId], references: [id])
  followingId    String
  createdAt      DateTime    @default(now())

  @@id([followerId, followingId]) // Composite primary key to ensure uniqueness
}

model JoinRealm {
  joiner         User        @relation("JoiningRealm", fields: [joinerId], references: [id])
  joinerId       String
  realm          Realm       @relation("JoinedRealm", fields: [realmId], references: [id])
  realmId        String
  createdAt      DateTime    @default(now())

  @@id([joinerId, realmId]) // Composite primary key to ensure uniqueness
}

model Realm {
  id             String      @id @default(uuid())
  name           String
  description    String
  photo          String?

  author         User?       @relation("RealmCreatedBy", fields: [authorId], references: [id])
  authorId       String?

  posts          Post[]
  followers      JoinRealm[] @relation("JoinedRealm")

  @@unique([name])
}

model Post {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  published      Boolean

  realm          Realm       @relation(fields: [realmId], references: [id])
  realmId        String

  title          String
  text           String?
  medias         Media[]

  author         User?       @relation(fields: [authorId], references: [id])
  authorId       String?
  likes          Like[]      @relation("LikedPost")
  comments       Comment[]

  @@index([realmId])
}

model Media {
  id             String      @id @default(uuid())
  url            String
  type           MediaType // Enum to define whether it's an image or video
  post           Post?       @relation(fields: [postId], references: [id])
  postId         String?
}

model Like {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  user           User?       @relation("LikedBy", fields: [userId], references: [id])
  userId         String?
  post           Post?       @relation("LikedPost", fields: [postId], references: [id])
  postId         String?

  @@unique([userId, postId]) // Ensures a user can like a post only once
  @@index([userId])
  @@index([postId])
}

model Comment {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  content        String
  user           User?       @relation(fields: [userId], references: [id])
  userId         String?
  post           Post?       @relation(fields: [postId], references: [id])
  postId         String?
  parent         Comment?    @relation("NestedComments", fields: [parentId], references: [id])
  parentId       String?
  nestedComments Comment[]   @relation("NestedComments")
}

// Enum to specify the type of media
enum MediaType {
  IMAGE
  VIDEO
}
